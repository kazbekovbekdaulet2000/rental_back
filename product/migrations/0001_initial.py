# Generated by Django 4.0.8 on 2022-12-15 10:36

import ckeditor_uploader.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import product.models.product_photo
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_ru', models.CharField(default='attribute_ru', max_length=255)),
                ('attribute_kk', models.CharField(default='attribute_kk', max_length=255)),
            ],
            options={
                'verbose_name': 'Аттрибут',
                'verbose_name_plural': 'Аттрибуты',
            },
        ),
        migrations.CreateModel(
            name='BotUser',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('user_id', models.PositiveBigIntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('approved', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'verbose_name': 'Рассылка',
                'verbose_name_plural': 'Рассылка',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('name_ru', models.CharField(max_length=255)),
                ('name_kk', models.CharField(max_length=255)),
                ('icon', models.FileField(blank=True, null=True, upload_to='category_icon')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('type', models.CharField(blank=True, choices=[('equipment', 'Оборудование'), ('service', 'Сервис')], max_length=255, null=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.category')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('name_ru', models.CharField(max_length=255)),
                ('name_kk', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField(blank=True, null=True)),
                ('articule', models.CharField(max_length=255, unique=True)),
                ('description_ru', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('description_kk', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('daily_price', models.IntegerField()),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('instruction_video', models.URLField(blank=True, null=True, verbose_name='Cсылка на инструкцию')),
                ('amount', models.PositiveIntegerField(default=5, verbose_name='Количество продукции')),
                ('active', models.BooleanField(default=True)),
                ('type', models.PositiveIntegerField(choices=[(0, 'Товар'), (2, 'Комплект')], default=0)),
                ('related_products_array', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), blank=True, null=True, size=None)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='product.category')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ('category', 'order', 'created_at'),
                'index_together': {('id', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='ProductDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField(verbose_name='Начало Акции')),
                ('end_date', models.DateTimeField(verbose_name='Конец Акции')),
            ],
            options={
                'verbose_name': 'Скидка',
                'verbose_name_plural': 'Скидки',
                'db_table': 'product_discount',
            },
        ),
        migrations.CreateModel(
            name='UserBag',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('delivery', models.BooleanField(default=False)),
                ('delivery_back', models.BooleanField(default=False)),
                ('previous_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.userbag')),
            ],
            options={
                'verbose_name': 'Корзина пользователя',
                'verbose_name_plural': 'Корзина пользователей',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBagItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('count', models.PositiveIntegerField(default=1)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='product.userbag')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('name_ru', models.CharField(max_length=255)),
                ('name_kk', models.CharField(max_length=255)),
                ('description_ru', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('description_kk', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True)),
                ('daily_price', models.IntegerField()),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Сервис',
                'verbose_name_plural': 'Сервисы',
                'ordering': ('created_at',),
                'index_together': {('id', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='ProductSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('count', models.PositiveIntegerField(default=1)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='set', to='product.product')),
                ('set_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='set_objects', to='product.product')),
            ],
            options={
                'verbose_name': 'Сет продукт',
                'verbose_name_plural': 'Сет продукт',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='ProductService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('required', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='product.product')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.service')),
            ],
            options={
                'verbose_name': 'Товар (Сервис)',
                'verbose_name_plural': 'Товары (Сервис)',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='ProductPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('image', models.ImageField(blank=True, upload_to=product.models.product_photo.thumb_dir, verbose_name='Фото')),
                ('image_thumb360', models.ImageField(blank=True, max_length=500, null=True, upload_to=product.models.product_photo.thumb_dir, verbose_name='Фото (360px)')),
                ('image_thumb720', models.ImageField(blank=True, max_length=500, null=True, upload_to=product.models.product_photo.thumb_dir, verbose_name='Фото (720px)')),
                ('image_thumb1080', models.ImageField(blank=True, max_length=500, null=True, upload_to=product.models.product_photo.thumb_dir, verbose_name='Фото (1080px)')),
                ('type', models.PositiveIntegerField(choices=[(0, 'Карусель'), (1, 'Превью')], default=0)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='product.product')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='product.service')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фотографии',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductItemDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('discount_percent', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(99)])),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discount_items', to='product.productdiscount')),
                ('products', models.ManyToManyField(related_name='discounts', to='product.product')),
            ],
            options={
                'verbose_name': 'Скидка',
                'verbose_name_plural': 'Скидки',
                'db_table': 'product_discount_item',
            },
        ),
        migrations.CreateModel(
            name='ProductAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('order', models.PositiveIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
            ],
            options={
                'verbose_name': 'Новый продукт',
                'verbose_name_plural': 'Новые продукты',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Изменен')),
                ('name', models.CharField(max_length=255, verbose_name='Имя заказчика')),
                ('phone', models.CharField(max_length=36, verbose_name='Телефон')),
                ('first_time_order', models.BooleanField(default=False, verbose_name='Заказ первый раз')),
                ('start_time', models.DateTimeField(verbose_name='Дата начала')),
                ('end_time', models.DateTimeField(verbose_name='Дата конца')),
                ('comment', models.TextField(blank=True, max_length=500, null=True)),
                ('approved', models.BooleanField(default=False, verbose_name='Принят')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес доставки')),
                ('address_return', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес возврата')),
                ('bag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='product.userbag')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_ru', models.CharField(default='value_ru', max_length=255)),
                ('value_kk', models.CharField(default='value_kk', max_length=255)),
                ('attribute', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='product.attribute')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eav', to='product.product')),
            ],
            options={
                'unique_together': {('attribute', 'product')},
            },
        ),
    ]
